generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Professional {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(50)
  email       String?   @unique @db.VarChar(100)
  phone       String?   @db.VarChar(20)
  photoUrl    String?   @db.VarChar(500)
  description String?   @db.VarChar(300)
  biography   String?   @db.Text
  role        Role
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  //specialties ProfessionalSpecialty[]
  //services    ServiceProfessional[]
  posts Post[]

  @@map("professional")
}

model Specialty {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(80)
  slug        String    @unique @db.VarChar(100)
  description String?   @db.VarChar(200)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  //professionals ProfessionalSpecialty[]

  @@map("specialty")
}

/**
 * model ProfessionalSpecialty {
 * id             Int      @id @default(autoincrement())
 * professionalId Int
 * specialtyId    Int
 * isPrimary      Boolean  @default(false)
 * certifications Json?
 * isActive       Boolean  @default(true)
 * displayOrder   Int      @default(0)
 * createdAt      DateTime @default(now())
 * updatedAt      DateTime @updatedAt
 * professional Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
 * specialty    Specialty    @relation(fields: [specialtyId], references: [id], onDelete: Cascade)
 * @@unique([professionalId, specialtyId])
 * @@index([professionalId, isActive, displayOrder])
 * @@map("professional_specialty")
 * }
 */

model Service {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  slug        String    @unique @db.VarChar(120)
  iconUrl     String?   @db.VarChar(500)
  imageUrl    String?   @db.VarChar(500)
  summary     String    @db.VarChar(200)
  description String?   @db.Text
  duration    Int?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  //professionals ServiceProfessional[]
  categories Category[]

  @@map("service")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(60)
  slug        String    @unique @db.VarChar(80)
  description String?   @db.VarChar(200)
  iconUrl     String?   @db.VarChar(500)
  color       String?   @db.VarChar(7)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  services Service[]

  @@map("category")
}

// model ServiceProfessional {
//   id             Int      @id @default(autoincrement())
//   serviceId      String
//   professionalId String
//   customPrice    Decimal? @db.Decimal(10, 2)
//   customDuration Int?
//   isAvailable    Boolean  @default(true)
//   notes          String?  @db.VarChar(300)
//   createdAt      DateTime @default(now())
//   updatedAt      DateTime @updatedAt
//
//   service      Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)
//   professional Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
//
//   @@unique([serviceId, professionalId])
//   @@index([professionalId, isAvailable])
//   @@map("service_professional")
// }

model Post {
  id             Int        @id @default(autoincrement())
  title          String     @db.VarChar(150)
  slug           String     @unique @db.VarChar(180)
  description    String     @db.VarChar(250)
  content        String     @db.Text
  featuredImage  String?    @db.VarChar(500)
  status         PostStatus @default(DRAFT)
  isPublished    Boolean    @default(false)
  publishedAt    DateTime?
  professionalId Int
  createdAt      DateTime   @default(now())
  updatedAt      DateTime?  @updatedAt

  professional Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  //tags         Tag[]

  @@map("post")
}

//
// model Tag {
//   id          Int      @id @default(autoincrement())
//   name        String   @unique @db.VarChar(50)
//   slug        String   @unique @db.VarChar(60)
//   description String?  @db.VarChar(150)
//   color       String?  @db.VarChar(7)
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//
//   posts Post[]
//
//   @@map("tag")
// }

enum Role {
  DOCTOR
  NUTRITIONIST
  PSYCHOLOGIST
  PHYSIOTHERAPIST
  OWNER

  @@map("role")
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED

  @@map("post_status")
}
